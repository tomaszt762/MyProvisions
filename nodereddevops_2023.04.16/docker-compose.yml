version: '3.9'
services:
  haproxy:
# to do
    image: haproxy:alpine
    container_name: haproxy
    restart: always
    depends_on:
      - nodered1
      - webclient
    ports:
      - "80:80"
    volumes:
      - C:\_HAL\DevOps\GitHub\_MyProvisions\docker-compose\_nodereddevops\haproxy:/usr/local/etc/haproxy
    networks:
      - private
  webclient:
# to do
    container_name: webclient
    image: nginx:alpine-slim
    expose:
      - "80"
    volumes:
      - 'C:\_HAL\DevOps\GitHub\_MyProvisions\docker-compose\_nodereddevops\html:/usr/share/nginx/html'
    networks:
      - private
  job-engine:
# to do
    container_name: job-engine
    image: "nodered/node-red:2.2.3-minimal"
    ports:
      - '1881:1881'
    depends_on:
      - redis
      - rabbitmq
      - minio
      - elastic
    environment:
      - CONTAINER_NAME='job-engine'
      - REDIS_HOSTS=${REDIS_HOSTS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - API_HOST=${API_HOST}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_HOST=${MINIO_HOST}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - ELASTICSEARCH_TIMEOUT=${ELASTICSEARCH_TIMEOUT}
      - ELASTICSEARCH_API=${ELASTICSEARCH_API}
      - ELASTICSEARCH_INDEX1=${ELASTICSEARCH_INDEX1}
      - ELASTICSEARCH_INDEX2=${ELASTICSEARCH_INDEX2}
    volumes:
      - C:\Users\P77416820\NodeRedDataExecEngine:/data
    networks:
      - private
  gui-job-engine:
    container_name: gui-job-engine
    image: "nodered/node-red:2.2.3-minimal"
    ports:
      - "1880:1880"
    depends_on:
      - redis
      - rabbitmq
    environment:
      - CONTAINER_NAME='gui-job-engine'
      - REDIS_HOSTS=${REDIS_HOSTS}
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - C:\Users\P77416820\NodeRedDataGuiJob:/data
    networks:
      - private
  rest-api:
# to do
    container_name: rest-api
    image: "nodered/node-red:2.2.3-minimal"
    ports:
      - '1884:1884'
    depends_on:
      - postgres
    environment:
      - CONTAINER_NAME='rest-api'
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - C:\Users\P77416820\NodeRedDataApiPost:/data
    networks:
      - private
  redis:
    image: redis:latest
    container_name: redis
    command: redis-server --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    restart: always
    networks:
      - private
  gui-redis:
    container_name: gui-redis
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=${REDIS_HOST}
    ports:
      - '8081:8081'
    depends_on:
      - redis
    networks:
      - private
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management-alpine
    hostname: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - private
  minio:
    container_name: minio
    image: minio/minio:latest
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    volumes:
      - minio-data:/data
    networks:
      - private
    command: server /data
  gui-minio:
    container_name: gui-minio
    image: mastertinner/s3manager:latest
    ports:
      - '8080:8080'
    environment:
      - ENDPOINT=${ENDPOINT}
      - ACCESS_KEY_ID=${ACCESS_KEY_ID}
      - SECRET_ACCESS_KEY=${SECRET_ACCESS_KEY}
      - USE_SSL=${USE_SSL}
    depends_on:
      - minio
    networks:
      - private
  postgres:
    container_name: postgres
    image: postgres:14.1
    ports:
      - '5432:5432'
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes: 
      - postgres-data:/var/lib/postgresql/data
      - ./:/docker-entrypoint-initdb.d/create_tables.sql
    networks:
      - private
  gui-postgres:
    container_name: gui-postgres
    image: dpage/pgadmin4
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT}
    ports:
      - '5050:5050'
    networks:
      - private
  elastic:
    container_name: elastic
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.8
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      - discovery.type=single-node
    volumes:
      - elastic-data:/data:rw
    networks:
      - private
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.17.8
    ports:
      - '5601:5601'
    environment:
      - SERVER_NAME=${SERVER_NAME}
      - SERVER_HOST=${SERVER_HOST}
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
    volumes:
      - kibana-data:/data:rw
    depends_on:
      - elastic
    networks:
      - private
volumes:
  minio-data:
  redis-data:
  postgres-data:
  elastic-data:
  kibana-data:
networks:
  private:
      driver: bridge
# docker network create external-network
# docker compose up -d
# docker compose down
# docker compose start
# docker compose stop
# docker system prune
# docker system prune --volumes
# docker network prune
# https://www.baeldung.com/devops/haproxy-api-gateway
# https://www.haproxy.com/blog/haproxy-configuration-basics-load-balance-your-servers/
# https://github.com/Cloudstek/docker-haproxy/blob/master/docker-compose.yml
# https://medium.com/tenable-techblog/simulating-enterprise-networks-in-development-using-the-docker-networking-stack-94bf547743c9
# https://doc.traefik.io/traefik/getting-started/quick-start/