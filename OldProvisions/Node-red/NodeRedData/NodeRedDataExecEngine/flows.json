[
    {
        "id": "4a3772c3c16aa277",
        "type": "tab",
        "label": "Dispatcher",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ce0a80634cfa7f19",
        "type": "tab",
        "label": "Execution Engine",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1b82e53adc154d4f",
        "type": "tab",
        "label": "API Requester",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b326c8d9f3dbe5bd",
        "type": "tab",
        "label": "Adapters",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4ade2752bb8e0a7b",
        "type": "amqp-broker",
        "name": "",
        "host": "${RABBITMQ_HOST}",
        "port": "${RABBITMQ_PORT}",
        "vhost": "",
        "tls": false,
        "credsFromSettings": false
    },
    {
        "id": "f989d629f9d0ba41",
        "type": "elasticsearch-config",
        "name": "",
        "server": "${ELASTICSEARCH_HOSTS}",
        "timeout": "30000",
        "apiVersion": "${ELASTICSEARCH_API}"
    },
    {
        "id": "ea379fd37875fcf3",
        "type": "minio-config",
        "name": "MinIO Instance",
        "host": "${MINIO_HOST}",
        "port": "${MINIO_PORT}",
        "useSsl": false
    },
    {
        "id": "41a95e246cd90d9c",
        "type": "change",
        "z": "4a3772c3c16aa277",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "stop",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 220,
        "wires": [
            [
                "a4bceba958c63ade"
            ]
        ]
    },
    {
        "id": "2f628e844ce034c2",
        "type": "inject",
        "z": "4a3772c3c16aa277",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 170,
        "y": 180,
        "wires": [
            [
                "41a95e246cd90d9c"
            ]
        ]
    },
    {
        "id": "93abfb7989ec1ffc",
        "type": "inject",
        "z": "4a3772c3c16aa277",
        "name": "Stop",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "41a95e246cd90d9c"
            ]
        ]
    },
    {
        "id": "6a372ebb5dd09b95",
        "type": "delay",
        "z": "4a3772c3c16aa277",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 620,
        "y": 320,
        "wires": [
            [
                "a4bceba958c63ade"
            ]
        ]
    },
    {
        "id": "ea3ca3637256ded7",
        "type": "function",
        "z": "4a3772c3c16aa277",
        "name": "SCAN => results",
        "func": "const redis = context.global.get('redis');\nconst envw = global.get('env');\nconst client = redis.createClient({ url: envw.REDIS_HOSTS });\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nawait client.connect();\n\nlet cursor = 0\nvar results = []\ndo {\n    let result = await client.SCAN(cursor, { \"MATCH\": \"isToTake:*\" });\n    cursor = result.cursor\n    for (const key of result.keys) {\n        results.push(key)\n    }\n} while (cursor != 0);\n//node.warn(results);\nawait client.UNWATCH()\nclient.quit()\nmsg.payload = results\nnode.send(msg)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 100,
        "wires": [
            [
                "34afdf4acf3476e8"
            ]
        ]
    },
    {
        "id": "165def92ed02c31e",
        "type": "function",
        "z": "4a3772c3c16aa277",
        "name": "hGetAll && DEL && hSet",
        "func": "var result = msg.payload\nconst redis = context.global.get('redis');\nconst envw = global.get('env');\nconst client = redis.createClient({ url: envw.REDIS_HOSTS });\n\nawait client.connect();\nawait client.WATCH(result)\nlet item = await client.hGetAll(result);\nlet date = new Date()\n\n\nif (item.timestamp !== undefined) {\n\n   // item['isTaken'] = { \"containerName\": envw.CONTAINER_NAME, \"timestamp\": date.toISOString() }\n    item['isTaken'] = envw.CONTAINER_NAME\n    item['timestamp'] = date.toISOString()\n    await client.multi()\n        .DEL(result)\n        .hSet('isTaken:' + item.id, item)\n        .exec();\n \n}\n\n\nmsg.statusCode = 200; //not found\nmsg.payload = item\nawait client.UNWATCH()\nclient.quit()\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 520,
        "wires": [
            [
                "34afdf4acf3476e8",
                "3aaba3a30d58bddd",
                "d2045831f93d852f"
            ]
        ]
    },
    {
        "id": "37357c68aa8169ad",
        "type": "delay",
        "z": "4a3772c3c16aa277",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 900,
        "y": 320,
        "wires": [
            [
                "165def92ed02c31e"
            ]
        ]
    },
    {
        "id": "3aaba3a30d58bddd",
        "type": "switch",
        "z": "4a3772c3c16aa277",
        "name": "",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "select",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "insert",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1110,
        "y": 380,
        "wires": [
            [
                "f8ba9714ad24f2d8"
            ],
            [
                "84458ea9aac7c2f9"
            ],
            [
                "0eb8cb6d42db27d0"
            ],
            [
                "5862c370c16dfeaa"
            ],
            [
                "4e9cc8647cdb8841"
            ]
        ]
    },
    {
        "id": "4e9cc8647cdb8841",
        "type": "debug",
        "z": "4a3772c3c16aa277",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 520,
        "wires": []
    },
    {
        "id": "f8ba9714ad24f2d8",
        "type": "amqp-out",
        "z": "4a3772c3c16aa277",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "select.tsk.routing.key",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 1430,
        "y": 280,
        "wires": []
    },
    {
        "id": "84458ea9aac7c2f9",
        "type": "amqp-out",
        "z": "4a3772c3c16aa277",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "update.tsk.routing.key",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 1440,
        "y": 340,
        "wires": []
    },
    {
        "id": "0eb8cb6d42db27d0",
        "type": "amqp-out",
        "z": "4a3772c3c16aa277",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "insert.tsk.routing.key",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 1430,
        "y": 400,
        "wires": []
    },
    {
        "id": "5862c370c16dfeaa",
        "type": "amqp-out",
        "z": "4a3772c3c16aa277",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "delete.tsk.routing.key",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 1430,
        "y": 460,
        "wires": []
    },
    {
        "id": "faea492491c635a9",
        "type": "amqp-in",
        "z": "4a3772c3c16aa277",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "command01.routing.key",
        "exchangeDurable": true,
        "queueName": "",
        "queueExclusive": true,
        "queueDurable": false,
        "queueAutoDelete": true,
        "headers": "{}",
        "x": 260,
        "y": 100,
        "wires": [
            [
                "41a95e246cd90d9c"
            ]
        ]
    },
    {
        "id": "d2045831f93d852f",
        "type": "debug",
        "z": "4a3772c3c16aa277",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 520,
        "wires": []
    },
    {
        "id": "69abc1c2f4c5d82e",
        "type": "comment",
        "z": "4a3772c3c16aa277",
        "name": "nodes",
        "info": "node-red-contrib-loop\nnode-red-dashboard\nnode-red-node-ui-table\n@meowwolf/node-red-contrib-amqp\n@reggae_ulli/node-red-contrib-minio-all-fix\nnode-red-contrib-postgresql",
        "x": 70,
        "y": 40,
        "wires": []
    },
    {
        "id": "a4bceba958c63ade",
        "type": "loop",
        "z": "4a3772c3c16aa277",
        "name": "",
        "kind": "cond",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "flow.get(\"stop\")",
        "conditionType": "js",
        "when": "before",
        "enumeration": "enum",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-keep",
        "finalPayload": "final-orig",
        "x": 580,
        "y": 100,
        "wires": [
            [],
            [
                "ea3ca3637256ded7"
            ]
        ]
    },
    {
        "id": "34afdf4acf3476e8",
        "type": "loop",
        "z": "4a3772c3c16aa277",
        "name": "",
        "kind": "enum",
        "count": "",
        "initial": "1",
        "step": "1",
        "condition": "",
        "conditionType": "js",
        "when": "before",
        "enumeration": "payload",
        "enumerationType": "msg",
        "limit": "",
        "loopPayload": "loop-val",
        "finalPayload": "final-last",
        "x": 810,
        "y": 200,
        "wires": [
            [
                "6a372ebb5dd09b95"
            ],
            [
                "37357c68aa8169ad"
            ]
        ]
    },
    {
        "id": "14ededb440c022bc",
        "type": "function",
        "z": "ce0a80634cfa7f19",
        "name": "flow.set",
        "func": "flow.set(msg.payload.id, msg.payload);\nmsg.id = msg.payload.id\nmsg.delay = msg.payload.delay\nmsg.counter = 0\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 120,
        "wires": [
            [
                "383fe45d58e4272b"
            ]
        ]
    },
    {
        "id": "7175a0d66850dc4f",
        "type": "amqp-in",
        "z": "ce0a80634cfa7f19",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "prefetch": 0,
        "noAck": false,
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "select.tsk.routing.key",
        "exchangeDurable": true,
        "queueName": "",
        "queueExclusive": true,
        "queueDurable": false,
        "queueAutoDelete": true,
        "headers": "{}",
        "x": 187,
        "y": 122,
        "wires": [
            [
                "14ededb440c022bc"
            ]
        ]
    },
    {
        "id": "383fe45d58e4272b",
        "type": "function",
        "z": "ce0a80634cfa7f19",
        "name": "Cycles",
        "func": "var item = flow.get(msg.id) || {};\n\nwhile (item.iterations > msg.counter) {\n   msg.counter++\n   flow.set(item.id, item);\n\n   return [msg, null];\n}\nflow.set(msg.id, undefined);\n\nmsg.payload = item\nreturn [null, msg];\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 120,
        "wires": [
            [
                "56dee1a2386a3055"
            ],
            [
                "2a4bfe1a37415272"
            ]
        ]
    },
    {
        "id": "56dee1a2386a3055",
        "type": "delay",
        "z": "ce0a80634cfa7f19",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 40,
        "wires": [
            [
                "215de501e241ed2f",
                "23d068dd74b60419"
            ]
        ]
    },
    {
        "id": "215de501e241ed2f",
        "type": "debug",
        "z": "ce0a80634cfa7f19",
        "name": "select",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 40,
        "wires": []
    },
    {
        "id": "6e68e7ca79ff6b5e",
        "type": "function",
        "z": "ce0a80634cfa7f19",
        "name": "flow.set",
        "func": "flow.set(msg.payload.id, msg.payload);\nmsg.id = msg.payload.id\nmsg.delay = msg.payload.delay\nmsg.counter = 0\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 260,
        "wires": [
            [
                "259e1ed3c8383515"
            ]
        ]
    },
    {
        "id": "cb7116c15eb137ab",
        "type": "amqp-in",
        "z": "ce0a80634cfa7f19",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "prefetch": 0,
        "noAck": false,
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "update.tsk.routing.key",
        "exchangeDurable": true,
        "queueName": "",
        "queueExclusive": true,
        "queueDurable": false,
        "queueAutoDelete": true,
        "headers": "{}",
        "x": 187,
        "y": 262,
        "wires": [
            [
                "6e68e7ca79ff6b5e"
            ]
        ]
    },
    {
        "id": "259e1ed3c8383515",
        "type": "function",
        "z": "ce0a80634cfa7f19",
        "name": "Cycles",
        "func": "var item = flow.get(msg.id) || {};\n\nwhile (item.iterations > msg.counter) {\n   msg.counter++\n   flow.set(item.id, item);\n\n   return [msg, null];\n}\nflow.set(msg.id, undefined);\n\nmsg.payload = item\nreturn [null, msg];\n\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 260,
        "wires": [
            [
                "f0502c5d64ebdb5f"
            ],
            [
                "2a4bfe1a37415272"
            ]
        ]
    },
    {
        "id": "f0502c5d64ebdb5f",
        "type": "delay",
        "z": "ce0a80634cfa7f19",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 180,
        "wires": [
            [
                "ddf8fb6962532cd1",
                "dd7300b6ffea4466"
            ]
        ]
    },
    {
        "id": "0c7bae4ebfb1500f",
        "type": "function",
        "z": "ce0a80634cfa7f19",
        "name": "flow.set",
        "func": "flow.set(msg.payload.id, msg.payload);\nmsg.id = msg.payload.id\nmsg.delay = msg.payload.delay\nmsg.counter = 0\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 400,
        "wires": [
            [
                "1302c43b3b3cf8e4"
            ]
        ]
    },
    {
        "id": "82ea8cc2a55fee86",
        "type": "amqp-in",
        "z": "ce0a80634cfa7f19",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "prefetch": 0,
        "noAck": false,
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "insert.tsk.routing.key",
        "exchangeDurable": true,
        "queueName": "",
        "queueExclusive": true,
        "queueDurable": false,
        "queueAutoDelete": true,
        "headers": "{}",
        "x": 187,
        "y": 402,
        "wires": [
            [
                "0c7bae4ebfb1500f"
            ]
        ]
    },
    {
        "id": "1302c43b3b3cf8e4",
        "type": "function",
        "z": "ce0a80634cfa7f19",
        "name": "Cycles",
        "func": "var item = flow.get(msg.id) || {};\n\nwhile (item.iterations > msg.counter) {\n   msg.counter++\n   flow.set(item.id, item);\n\n   return [msg, null];\n}\nflow.set(msg.id, undefined);\n\nmsg.payload = item\nreturn [null, msg];\n\n\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "1f393ed18e79a601"
            ],
            [
                "2a4bfe1a37415272"
            ]
        ]
    },
    {
        "id": "1f393ed18e79a601",
        "type": "delay",
        "z": "ce0a80634cfa7f19",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 320,
        "wires": [
            [
                "5c6fb2d14cc93eef",
                "b982b5920d34ea2b"
            ]
        ]
    },
    {
        "id": "5c6fb2d14cc93eef",
        "type": "debug",
        "z": "ce0a80634cfa7f19",
        "name": "insert",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 320,
        "wires": []
    },
    {
        "id": "0eabfbcb3eacd667",
        "type": "function",
        "z": "ce0a80634cfa7f19",
        "name": "flow.set",
        "func": "flow.set(msg.payload.id, msg.payload);\nmsg.id = msg.payload.id\nmsg.delay = msg.payload.delay\nmsg.counter = 0\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 540,
        "wires": [
            [
                "7594d2a8e3fe851a"
            ]
        ]
    },
    {
        "id": "66b40480a233363d",
        "type": "amqp-in",
        "z": "ce0a80634cfa7f19",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "prefetch": 0,
        "noAck": false,
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "delete.tsk.routing.key",
        "exchangeDurable": true,
        "queueName": "",
        "queueExclusive": true,
        "queueDurable": false,
        "queueAutoDelete": true,
        "headers": "{}",
        "x": 187,
        "y": 542,
        "wires": [
            [
                "0eabfbcb3eacd667"
            ]
        ]
    },
    {
        "id": "7594d2a8e3fe851a",
        "type": "function",
        "z": "ce0a80634cfa7f19",
        "name": "Cycles",
        "func": "var item = flow.get(msg.id) || {};\n\nwhile (item.iterations > msg.counter) {\n   msg.counter++\n   flow.set(item.id, item);\n\n   return [msg, null];\n}\nflow.set(msg.id, undefined);\n\nmsg.payload = item\nreturn [null, msg];\n\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 540,
        "wires": [
            [
                "32994967017df7b5"
            ],
            [
                "2a4bfe1a37415272"
            ]
        ]
    },
    {
        "id": "32994967017df7b5",
        "type": "delay",
        "z": "ce0a80634cfa7f19",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 460,
        "wires": [
            [
                "62dfd998b64d02a5",
                "0d00e6c7c854e0a0"
            ]
        ]
    },
    {
        "id": "62dfd998b64d02a5",
        "type": "debug",
        "z": "ce0a80634cfa7f19",
        "name": "update",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 460,
        "wires": []
    },
    {
        "id": "2a4bfe1a37415272",
        "type": "function",
        "z": "ce0a80634cfa7f19",
        "name": "isDone",
        "func": "let date = new Date()\n\nif (msg.payload.timestamp !== undefined) {\n    const redis = context.global.get('redis');\n    const envw = global.get('env');\n    const client = redis.createClient({ url: envw.REDIS_HOSTS });\n //   msg.payload['isDone'] = { \"containerName\": envw.CONTAINER_NAME, \"timestamp\": date.toISOString() }\n    msg.payload['isDone'] = envw.CONTAINER_NAME\n    let isDone = Object.assign({}, msg.payload);\n    isDone['timestamp'] = date.toISOString()\n\n    let summary = Object.assign({}, msg.payload);\n    summary['timestamp'] = date.toISOString()\n\n\n    await client.connect();\n    await client.multi()\n        .DEL(\"isTaken:\" + msg.payload.id)\n        .hSet(\"isDone:\" + isDone.id, isDone)\n        .exec();\n    await client.UNWATCH()\n    client.quit()\n\n    summary['type'] = \"summary\"\n    summary['duration'] = date.getTime() - new Date(msg.payload.timestamp).getTime()\n    msg.payload = { \"isDone\": isDone, \"summary\": summary }\n    node.send(msg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "5fb22c107375a53b"
            ]
        ]
    },
    {
        "id": "23d068dd74b60419",
        "type": "link call",
        "z": "ce0a80634cfa7f19",
        "name": "select",
        "links": [
            "665a0912dfeec867"
        ],
        "timeout": "30",
        "x": 730,
        "y": 80,
        "wires": [
            [
                "383fe45d58e4272b"
            ]
        ]
    },
    {
        "id": "ddf8fb6962532cd1",
        "type": "link call",
        "z": "ce0a80634cfa7f19",
        "name": "update",
        "links": [
            "072c647353e9a8e2"
        ],
        "timeout": "30",
        "x": 730,
        "y": 200,
        "wires": [
            [
                "259e1ed3c8383515"
            ]
        ]
    },
    {
        "id": "0d00e6c7c854e0a0",
        "type": "link call",
        "z": "ce0a80634cfa7f19",
        "name": "delete",
        "links": [
            "9cd692479432fac6"
        ],
        "timeout": "30",
        "x": 710,
        "y": 480,
        "wires": [
            [
                "7594d2a8e3fe851a"
            ]
        ]
    },
    {
        "id": "b982b5920d34ea2b",
        "type": "link call",
        "z": "ce0a80634cfa7f19",
        "name": "insert",
        "links": [
            "5fcbb82824409573"
        ],
        "timeout": "30",
        "x": 710,
        "y": 340,
        "wires": [
            [
                "1302c43b3b3cf8e4"
            ]
        ]
    },
    {
        "id": "9b64238ea53724d0",
        "type": "comment",
        "z": "ce0a80634cfa7f19",
        "name": "nodes",
        "info": "node-red-contrib-loop\nnode-red-dashboard\nnode-red-node-ui-table\n@meowwolf/node-red-contrib-amqp\n@reggae_ulli/node-red-contrib-minio-all-fix\nnode-red-contrib-postgresql",
        "x": 110,
        "y": 60,
        "wires": []
    },
    {
        "id": "5fb22c107375a53b",
        "type": "amqp-out",
        "z": "ce0a80634cfa7f19",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "log.routing.key",
        "exchangeRoutingKeyType": "str",
        "exchangeDurable": true,
        "amqpProperties": "{ \"headers\": {} }",
        "rpcTimeoutMilliseconds": 3000,
        "outputs": 0,
        "x": 1210,
        "y": 160,
        "wires": []
    },
    {
        "id": "dd7300b6ffea4466",
        "type": "debug",
        "z": "ce0a80634cfa7f19",
        "name": "update",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 180,
        "wires": []
    },
    {
        "id": "99d14acff94723b8",
        "type": "http request",
        "z": "1b82e53adc154d4f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "x": 410,
        "y": 40,
        "wires": [
            [
                "4a434d552428ea64"
            ]
        ]
    },
    {
        "id": "d8d46a5ddb3a5867",
        "type": "link in",
        "z": "1b82e53adc154d4f",
        "name": "count in",
        "links": [],
        "x": 75,
        "y": 40,
        "wires": [
            [
                "589d609cce441f13"
            ]
        ]
    },
    {
        "id": "4a434d552428ea64",
        "type": "link out",
        "z": "1b82e53adc154d4f",
        "name": "count out",
        "mode": "return",
        "links": [],
        "x": 545,
        "y": 40,
        "wires": []
    },
    {
        "id": "665a0912dfeec867",
        "type": "link in",
        "z": "1b82e53adc154d4f",
        "name": "select in",
        "links": [],
        "x": 75,
        "y": 100,
        "wires": [
            [
                "73f1f7e44d639d80"
            ]
        ]
    },
    {
        "id": "73f1f7e44d639d80",
        "type": "link call",
        "z": "1b82e53adc154d4f",
        "name": "count",
        "links": [
            "d8d46a5ddb3a5867"
        ],
        "timeout": "30",
        "x": 240,
        "y": 100,
        "wires": [
            [
                "25bd613e96959905"
            ]
        ]
    },
    {
        "id": "25bd613e96959905",
        "type": "function",
        "z": "1b82e53adc154d4f",
        "name": "select",
        "func": "msg.dbcount = msg.payload[0].count\nvar value = Math.floor(Math.random() * msg.dbcount) + 1\n\nconst envw = global.get('env');\nmsg.url = envw.API_HOST +'/api'\nmsg.payload = { \"id\": value}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            [
                "faf5cf03e2407786"
            ]
        ]
    },
    {
        "id": "faf5cf03e2407786",
        "type": "http request",
        "z": "1b82e53adc154d4f",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 100,
        "wires": [
            [
                "884b094954c27cf3"
            ]
        ]
    },
    {
        "id": "884b094954c27cf3",
        "type": "link out",
        "z": "1b82e53adc154d4f",
        "name": "select out",
        "mode": "return",
        "links": [],
        "x": 985,
        "y": 100,
        "wires": []
    },
    {
        "id": "735d13ef272173d4",
        "type": "function",
        "z": "1b82e53adc154d4f",
        "name": "insert",
        "func": "const firstNames = [\"Liam\", \"Noah\", \"Oliver\", \"William\", \"Elijah\", \"James\", \"Benjamin\", \"Lucas\", \"Mason\", \"Ethan\", \"Alexander\", \"Henry\", \"Jacob\", \"Michael\", \"Daniel\", \"Logan\", \"Jackson\", \"Sebastian\", \"Jack\", \"Aiden\"];\nconst sirNames = [\"Jones\", \"Taylor\", \"Williams\", \"Brown\", \"White\", \"Harris\", \"Martin\", \"Davies\", \"Wilson\", \"Cooper\", \"Evans\", \"King\", \"Thomas\", \"Baker\", \"Green\", \"Wright\", \"Johnson\", \"Edwards\", \"Clark\", \"Roberts\", \"Robinson\", \"Hall\", \"Lewis\", \"Young\", \"Davis\", \"Turner\", \"Hill\", \"Phillips\", \"Collins\", \"Allen\", \"Moore\", \"Thompson\", \"Carter\", \"James\", \"Knight\", \"Walker\", \"Wood\", \"Hughes\", \"Parker\", \"Ward\", \"Bennett\", \"Cook\", \"Webb\", \"Bailey\", \"Scott\", \"Jackson\", \"Lee\", \"Cox\"];\n\n\n\n    var item = {};\n    item.forename = randomFirstname();\n    item.sirname = randomSirname();\n    item.userid = \"U\" + randomInt(1000, 2999);\n    item.age = randomInt(20, 65);\n\n\nfunction randomFirstname() {\n    return firstNames[randomInt(0, firstNames.length - 1)];\n}\n\nfunction randomSirname() {\n    return sirNames[randomInt(0, sirNames.length - 1)];\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\nmsg.payload = item\nconst envw = global.get('env');\nmsg.url = envw.API_HOST + '/api'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 280,
        "wires": [
            [
                "1dfd02de42fec6dc"
            ]
        ]
    },
    {
        "id": "1dfd02de42fec6dc",
        "type": "http request",
        "z": "1b82e53adc154d4f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 280,
        "wires": [
            [
                "471003770bd848a8"
            ]
        ]
    },
    {
        "id": "2f2c535c5c333ba5",
        "type": "function",
        "z": "1b82e53adc154d4f",
        "name": "update",
        "func": "msg.dbcount = msg.payload[0].count\nvar value = Math.floor(Math.random() * msg.dbcount) + 1\n\nconst firstNames = [\"Liam\", \"Noah\", \"Oliver\", \"William\", \"Elijah\", \"James\", \"Benjamin\", \"Lucas\", \"Mason\", \"Ethan\", \"Alexander\", \"Henry\", \"Jacob\", \"Michael\", \"Daniel\", \"Logan\", \"Jackson\", \"Sebastian\", \"Jack\", \"Aiden\"];\nconst sirNames = [\"Jones\", \"Taylor\", \"Williams\", \"Brown\", \"White\", \"Harris\", \"Martin\", \"Davies\", \"Wilson\", \"Cooper\", \"Evans\", \"King\", \"Thomas\", \"Baker\", \"Green\", \"Wright\", \"Johnson\", \"Edwards\", \"Clark\", \"Roberts\", \"Robinson\", \"Hall\", \"Lewis\", \"Young\", \"Davis\", \"Turner\", \"Hill\", \"Phillips\", \"Collins\", \"Allen\", \"Moore\", \"Thompson\", \"Carter\", \"James\", \"Knight\", \"Walker\", \"Wood\", \"Hughes\", \"Parker\", \"Ward\", \"Bennett\", \"Cook\", \"Webb\", \"Bailey\", \"Scott\", \"Jackson\", \"Lee\", \"Cox\"];\n\nvar item = {\n\"id\": value,\n\"forename\": randomFirstname(),\n\"sirname\": randomSirname(),\n\"userid\": \"U\" + randomInt(1000, 2999),\n\"age\": randomInt(20, 65)\n}\n\nfunction randomFirstname() {\n    return firstNames[randomInt(0, firstNames.length - 1)];\n}\n\nfunction randomSirname() {\n    return sirNames[randomInt(0, sirNames.length - 1)];\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n//msg.payload = JSON.stringify(item)\nconst envw = global.get('env');\nmsg.url = envw.API_HOST +'/api'\nmsg.payload = item\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "fbb2ee30fbed0e2e"
            ]
        ]
    },
    {
        "id": "72e1fd37071630be",
        "type": "http request",
        "z": "1b82e53adc154d4f",
        "name": "",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 180,
        "wires": [
            [
                "3fc9fc1f634893a7"
            ]
        ]
    },
    {
        "id": "3e41cf6aea273de9",
        "type": "function",
        "z": "1b82e53adc154d4f",
        "name": "delete",
        "func": "msg.dbcount = msg.payload[0].count\nvar value = Math.floor(Math.random() * msg.dbcount) + 1\nmsg.payload = {\"id\": value}\nconst envw = global.get('env');\nmsg.url = envw.API_HOST +'/api'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 360,
        "wires": [
            [
                "3942503d0a0dc4cc"
            ]
        ]
    },
    {
        "id": "fbb2ee30fbed0e2e",
        "type": "json",
        "z": "1b82e53adc154d4f",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 630,
        "y": 180,
        "wires": [
            [
                "72e1fd37071630be"
            ]
        ]
    },
    {
        "id": "3942503d0a0dc4cc",
        "type": "json",
        "z": "1b82e53adc154d4f",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 630,
        "y": 360,
        "wires": [
            [
                "0fa6e093c3c1ee20"
            ]
        ]
    },
    {
        "id": "0fa6e093c3c1ee20",
        "type": "http request",
        "z": "1b82e53adc154d4f",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 360,
        "wires": [
            [
                "fc7e7823ab1fab3c"
            ]
        ]
    },
    {
        "id": "072c647353e9a8e2",
        "type": "link in",
        "z": "1b82e53adc154d4f",
        "name": "update in",
        "links": [],
        "x": 75,
        "y": 180,
        "wires": [
            [
                "3e6d3a1e6f8f6366"
            ]
        ]
    },
    {
        "id": "3fc9fc1f634893a7",
        "type": "link out",
        "z": "1b82e53adc154d4f",
        "name": "update out",
        "mode": "return",
        "links": [],
        "x": 985,
        "y": 180,
        "wires": []
    },
    {
        "id": "5fcbb82824409573",
        "type": "link in",
        "z": "1b82e53adc154d4f",
        "name": "insert in",
        "links": [],
        "x": 75,
        "y": 280,
        "wires": [
            [
                "735d13ef272173d4"
            ]
        ]
    },
    {
        "id": "471003770bd848a8",
        "type": "link out",
        "z": "1b82e53adc154d4f",
        "name": "insert out",
        "mode": "return",
        "links": [],
        "x": 985,
        "y": 280,
        "wires": []
    },
    {
        "id": "9cd692479432fac6",
        "type": "link in",
        "z": "1b82e53adc154d4f",
        "name": "delete in",
        "links": [],
        "x": 75,
        "y": 360,
        "wires": [
            [
                "059e5ea2f2cccecf"
            ]
        ]
    },
    {
        "id": "fc7e7823ab1fab3c",
        "type": "link out",
        "z": "1b82e53adc154d4f",
        "name": "delete out",
        "mode": "return",
        "links": [],
        "x": 985,
        "y": 360,
        "wires": []
    },
    {
        "id": "3e6d3a1e6f8f6366",
        "type": "link call",
        "z": "1b82e53adc154d4f",
        "name": "count",
        "links": [
            "d8d46a5ddb3a5867"
        ],
        "timeout": "30",
        "x": 230,
        "y": 180,
        "wires": [
            [
                "2f2c535c5c333ba5"
            ]
        ]
    },
    {
        "id": "059e5ea2f2cccecf",
        "type": "link call",
        "z": "1b82e53adc154d4f",
        "name": "count",
        "links": [
            "d8d46a5ddb3a5867"
        ],
        "timeout": "30",
        "x": 230,
        "y": 360,
        "wires": [
            [
                "3e41cf6aea273de9"
            ]
        ]
    },
    {
        "id": "589d609cce441f13",
        "type": "function",
        "z": "1b82e53adc154d4f",
        "name": "/count",
        "func": "const envw = global.get('env');\nmsg.url = envw.API_HOST +'/count'\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 40,
        "wires": [
            [
                "99d14acff94723b8"
            ]
        ]
    },
    {
        "id": "9d596c745b940beb",
        "type": "amqp-in",
        "z": "b326c8d9f3dbe5bd",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "*.tsk.routing.key",
        "exchangeDurable": true,
        "queueName": "",
        "queueExclusive": true,
        "queueDurable": false,
        "queueAutoDelete": true,
        "headers": "{}",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "ed71c2beadd69734"
            ]
        ]
    },
    {
        "id": "fb621285358a4e07",
        "type": "debug",
        "z": "b326c8d9f3dbe5bd",
        "name": "S3 OK",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 40,
        "wires": []
    },
    {
        "id": "37b87597d64ec9e6",
        "type": "debug",
        "z": "b326c8d9f3dbe5bd",
        "name": "S3 NOK",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 100,
        "wires": []
    },
    {
        "id": "ed71c2beadd69734",
        "type": "function",
        "z": "b326c8d9f3dbe5bd",
        "name": "isTaken - prepare to PUT",
        "func": "const envw = global.get('env');\n\n\nmsg.objectName = 'isTaken:' + msg.payload.id\nmsg.bucketName = 'store'\nmsg.payload['url'] = 'http://localhost:8080/api/buckets/' + envw.MINIO_BUCKET + '/objects/' + msg.objectName\nmsg.stream = Buffer.from(JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 120,
        "wires": [
            [
                "c442c4ec25596865",
                "4dc7fcfc088ca711"
            ]
        ]
    },
    {
        "id": "46b086a50b2a5e1a",
        "type": "inject",
        "z": "b326c8d9f3dbe5bd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 610,
        "y": 540,
        "wires": [
            [
                "b8161c95d5d343d3"
            ]
        ]
    },
    {
        "id": "3c832bf49ea57a0b",
        "type": "debug",
        "z": "b326c8d9f3dbe5bd",
        "name": "S3 OK",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 360,
        "wires": []
    },
    {
        "id": "aae2312486049f90",
        "type": "debug",
        "z": "b326c8d9f3dbe5bd",
        "name": "S3 NOK",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 680,
        "wires": []
    },
    {
        "id": "7fb7fbe6b5205dba",
        "type": "function",
        "z": "b326c8d9f3dbe5bd",
        "name": "isDone - prepare to PUT",
        "func": "const envw = global.get('env');\n\n\nmsg.objectName = 'isDone:'+ msg.payload.id\nmsg.bucketName = 'store'\nmsg.payload['url'] = 'http://localhost:8080/api/buckets/' + envw.MINIO_BUCKET + '/objects/' + msg.objectName\nmsg.stream = Buffer.from(JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 320,
        "wires": [
            [
                "33a18a35851627c9",
                "4dc7fcfc088ca711"
            ]
        ]
    },
    {
        "id": "21b138caf547afba",
        "type": "switch",
        "z": "b326c8d9f3dbe5bd",
        "name": "",
        "property": "payload.bucketExists",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 440,
        "wires": [
            [
                "3c832bf49ea57a0b"
            ],
            [
                "727c75ef517a20dd"
            ]
        ]
    },
    {
        "id": "ab82276b79821b42",
        "type": "inject",
        "z": "b326c8d9f3dbe5bd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 610,
        "y": 580,
        "wires": [
            [
                "d93a6e6ed3b0eeb8",
                "d3454821dbac0949"
            ]
        ]
    },
    {
        "id": "c8b1bcf8fa766f11",
        "type": "inject",
        "z": "b326c8d9f3dbe5bd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "bucketName",
                "v": "store",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 610,
        "y": 700,
        "wires": [
            [
                "da3cf634c9978e8e"
            ]
        ]
    },
    {
        "id": "b3c9cb17b96619e2",
        "type": "amqp-in",
        "z": "b326c8d9f3dbe5bd",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "log.routing.key",
        "exchangeDurable": true,
        "queueName": "",
        "queueExclusive": true,
        "queueDurable": false,
        "queueAutoDelete": true,
        "headers": "{}",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "8324947d4c29a330",
                "c7a6ddb8d3d6da1e"
            ]
        ]
    },
    {
        "id": "8324947d4c29a330",
        "type": "debug",
        "z": "b326c8d9f3dbe5bd",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 200,
        "wires": []
    },
    {
        "id": "c7a6ddb8d3d6da1e",
        "type": "function",
        "z": "b326c8d9f3dbe5bd",
        "name": "Split Payload",
        "func": "var msg1 = {};\nvar msg2 = {};\n\n\nmsg1.payload = Object.assign({}, msg.payload.isDone);\nmsg2.payload = Object.assign({}, msg.payload.summary);\n\n\n\nreturn [msg1, msg2];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 380,
        "wires": [
            [
                "7fb7fbe6b5205dba"
            ],
            [
                "a77f1ed7be9d9359"
            ]
        ]
    },
    {
        "id": "ca5ce7fc79de73b4",
        "type": "amqp-in",
        "z": "b326c8d9f3dbe5bd",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "command02.routing.key",
        "exchangeDurable": true,
        "queueName": "",
        "queueExclusive": true,
        "queueDurable": false,
        "queueAutoDelete": true,
        "headers": "{}",
        "x": 560,
        "y": 640,
        "wires": [
            [
                "d93a6e6ed3b0eeb8",
                "d3454821dbac0949"
            ]
        ]
    },
    {
        "id": "c2b6b11799ba854b",
        "type": "inject",
        "z": "b326c8d9f3dbe5bd",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"query\":{\"match_all\":{}}}",
        "payloadType": "json",
        "x": 690,
        "y": 860,
        "wires": [
            [
                "41885e61ba536368",
                "51904f8f833fb0f2"
            ]
        ]
    },
    {
        "id": "536ae99b5c7e3e40",
        "type": "debug",
        "z": "b326c8d9f3dbe5bd",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 840,
        "wires": []
    },
    {
        "id": "8c277ea5ca79c231",
        "type": "amqp-in",
        "z": "b326c8d9f3dbe5bd",
        "name": "",
        "broker": "4ade2752bb8e0a7b",
        "prefetch": 0,
        "noAck": true,
        "exchangeName": "amq.topic",
        "exchangeType": "topic",
        "exchangeRoutingKey": "command03.routing.key",
        "exchangeDurable": true,
        "queueName": "",
        "queueExclusive": true,
        "queueDurable": false,
        "queueAutoDelete": true,
        "headers": "{}",
        "x": 300,
        "y": 920,
        "wires": [
            [
                "b8d36c617c14839e"
            ]
        ]
    },
    {
        "id": "b8d36c617c14839e",
        "type": "function",
        "z": "b326c8d9f3dbe5bd",
        "name": "pre-process",
        "func": "msg.payload = {\n    \"query\": {\n        \"match_all\": {}\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 920,
        "wires": [
            [
                "41885e61ba536368",
                "51904f8f833fb0f2"
            ]
        ]
    },
    {
        "id": "41885e61ba536368",
        "type": "elasticsearch-deleteByQuery",
        "z": "b326c8d9f3dbe5bd",
        "name": "Del time_series",
        "server": "f989d629f9d0ba41",
        "index": "${ELASTICSEARCH_INDEX1}",
        "esType": "time_series",
        "x": 880,
        "y": 920,
        "wires": [
            [
                "536ae99b5c7e3e40"
            ]
        ]
    },
    {
        "id": "51904f8f833fb0f2",
        "type": "elasticsearch-deleteByQuery",
        "z": "b326c8d9f3dbe5bd",
        "name": "Del summary",
        "server": "f989d629f9d0ba41",
        "index": "${ELASTICSEARCH_INDEX2}",
        "esType": "summary",
        "x": 870,
        "y": 860,
        "wires": [
            [
                "536ae99b5c7e3e40"
            ]
        ]
    },
    {
        "id": "4dc7fcfc088ca711",
        "type": "elasticsearch-index",
        "z": "b326c8d9f3dbe5bd",
        "name": "time_series",
        "server": "f989d629f9d0ba41",
        "index": "${ELASTICSEARCH_INDEX1}",
        "esType": "time_series",
        "esId": "",
        "routing": "",
        "x": 810,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "a77f1ed7be9d9359",
        "type": "elasticsearch-index",
        "z": "b326c8d9f3dbe5bd",
        "name": "summary",
        "server": "f989d629f9d0ba41",
        "index": "${ELASTICSEARCH_INDEX2}",
        "esType": "summary",
        "esId": "",
        "routing": "",
        "x": 560,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b8161c95d5d343d3",
        "type": "buckets",
        "z": "b326c8d9f3dbe5bd",
        "buckets_name": "bucketExists",
        "host": "ea379fd37875fcf3",
        "buckets_operation": "bucketExists",
        "buckets_bucket": "${MINIO_BUCKET}",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 1010,
        "y": 540,
        "wires": [
            [
                "21b138caf547afba"
            ],
            [
                "aae2312486049f90"
            ]
        ]
    },
    {
        "id": "727c75ef517a20dd",
        "type": "buckets",
        "z": "b326c8d9f3dbe5bd",
        "buckets_name": "makeBucket",
        "host": "ea379fd37875fcf3",
        "buckets_operation": "makeBucket",
        "buckets_bucket": "${MINIO_BUCKET}",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 1010,
        "y": 460,
        "wires": [
            [
                "3c832bf49ea57a0b"
            ],
            [
                "aae2312486049f90"
            ]
        ]
    },
    {
        "id": "da3cf634c9978e8e",
        "type": "buckets",
        "z": "b326c8d9f3dbe5bd",
        "buckets_name": "removceBucket",
        "host": "ea379fd37875fcf3",
        "buckets_operation": "removeBucket",
        "buckets_bucket": "${MINIO_BUCKET}",
        "buckets_region": "",
        "buckets_prefix": "",
        "buckets_recursive": false,
        "buckets_start_after": "",
        "x": 1000,
        "y": 680,
        "wires": [
            [
                "3c832bf49ea57a0b"
            ],
            [
                "aae2312486049f90"
            ]
        ]
    },
    {
        "id": "c442c4ec25596865",
        "type": "objects",
        "z": "b326c8d9f3dbe5bd",
        "objects_name": "putObject",
        "host": "ea379fd37875fcf3",
        "objects_operation": "putObject",
        "objects_bucket": "${MINIO_BUCKET}",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 540,
        "y": 60,
        "wires": [
            [
                "fb621285358a4e07"
            ],
            [
                "37b87597d64ec9e6"
            ]
        ]
    },
    {
        "id": "33a18a35851627c9",
        "type": "objects",
        "z": "b326c8d9f3dbe5bd",
        "objects_name": "putObject",
        "host": "ea379fd37875fcf3",
        "objects_operation": "putObject",
        "objects_bucket": "${MINIO_BUCKET}",
        "objects_object": "",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": [],
        "objects_prefix": "",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 1020,
        "y": 380,
        "wires": [
            [
                "3c832bf49ea57a0b"
            ],
            [
                "aae2312486049f90"
            ]
        ]
    },
    {
        "id": "d93a6e6ed3b0eeb8",
        "type": "objects",
        "z": "b326c8d9f3dbe5bd",
        "objects_name": "removeObjects",
        "host": "ea379fd37875fcf3",
        "objects_operation": "removeObjects",
        "objects_bucket": "${MINIO_BUCKET}",
        "objects_object": "1672306946052",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": "",
        "objects_prefix": "isDone:",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 1000,
        "y": 600,
        "wires": [
            [
                "3c832bf49ea57a0b"
            ],
            [
                "aae2312486049f90"
            ]
        ]
    },
    {
        "id": "d3454821dbac0949",
        "type": "objects",
        "z": "b326c8d9f3dbe5bd",
        "objects_name": "removeObjects",
        "host": "ea379fd37875fcf3",
        "objects_operation": "removeObjects",
        "objects_bucket": "${MINIO_BUCKET}",
        "objects_object": "1672306946052",
        "objects_offset": "",
        "objects_length": "",
        "objects_stream": "",
        "objects_size": "",
        "objects_metadata": "",
        "objects_sourceobject": "",
        "objects_conditions": "",
        "objects_objectslist": "",
        "objects_prefix": "isTaken:",
        "objects_etag": "",
        "objects_datetime": "",
        "x": 1000,
        "y": 640,
        "wires": [
            [
                "3c832bf49ea57a0b"
            ],
            [
                "aae2312486049f90"
            ]
        ]
    }
]